* Tailwind CSS :  is an open source CSS framework

* Steps to use Tailwind CSS : 
    [1] install Tailwind ( npx tailwindcss init ) to install tailwind.config.js file
    [2] create two folders ( build and src ) inside build folder add index.html and inside src folder add input.css
    [3] add './build/*.html' inside content inside tailwind.config.js file to use tailwind on any html file inside build folder
    [4] inside input.css add those three lines ( @tailwind base; @tailwind components; @tailwind utilities; ) and add any custom class you want to add
    [5] compile by ( npx tailwindcss -i ./src/input.css -o ./build/css/style.css ) this will create css folder and create style.css file
    [6] to watch changes on live server ( npx tailwindcss -i ./src/input.css -o ./build/css/style.css --watch )

    - note : you can add Tailwind CSS IntelliSense extension to autocomplete the name of classes on html file
    - note : you can use Tailwind Website to sreach for classes names ( https://tailwindcss.com/ )
    - note : steps to use Tailwind with NextJs :
        [1] will be automatically installed with new version of nextjs 
        [2] be sure that those three lines ( @tailwind base; @tailwind components; @tailwind utilities; ) inside global.css
        [3] be sure that content: [
            './app/**/*.{js,ts,jsx,tsx,mdx}', // Note the addition of the `app` directory.
            './pages/**/*.{js,ts,jsx,tsx,mdx}',
            './components/**/*.{js,ts,jsx,tsx,mdx}',
 
            // Or if using `src` directory:
            './src/**/*.{js,ts,jsx,tsx,mdx}',
            ]
            inside tailwind.config.js file 
        [4] import global.css inside app/layout.tsx
 
* project in Lesson02 : 

    * to install package.json file (npm init -y)    
        then you can scripts to package.json so instead of writing ( npx tailwindcss -i ./src/input.css -o ./build/css/style.css --watch )
        you can write only npm run tailwind

    * to install prettier plugin (npm i -D prettier-plugin-tailwindcss )

    * some website will help you :
        - to get emoji : https://emojipedia.org
        - to get unicode symbols : https://symbl.cc/en/
    
* Custom classes in Tailwind : 
    [1] add custom class name :
        write your class inside input.css file ( like .radial-blue class in Lesson01)
    
    [2] change or mutate classes already in Tailwind :
        write it inside module.exports={ theme : {}} in tailwind.config.js
        like module.exports={ theme : { screens:{ sm : 480 px }}} => here we can change sm to any value we want 
        or like module.exports={ theme : { colors:{ blue : "1fb6ff" }}} => here we can change color of blue

    [3] if you want to add specific px or color not availabe in Tailwind use [] :
        - for exp. top-0 means top : 0 px , top-1 means top : 0.25 rem 
            so if you want to add top : 13 px , you can write top-[13px]
        - another exp. you want to use specific color like #bada55 you have two options : 
            [a] mutate any color in module.exports={ theme : { colors:{ blue : "#bada55" }}}
            [b] or use [] like bg-[#bada55]

* directives in Tailwind : 
    [1] @apply : 
        use @apply to write tailwind css code inside class at input.css file and you can reuse
        this class name to different html elements instead of writing long tailwind css code 
        for each html element ( like header-directive in header in Lesson03)
    
    [2] @layer :
        [a] solve the problem of order of overriding  
            the order of layer is : [1]base [2]components [3]utilities
            @layer allows you to write the CSS anywhere you like in input.css and this code will be be ordered like layers order
                for exp. you write :
                <button class="btn-blue bg-green-500">...</button> in html file
                .btn-blue {@apply bg-blue-500 text-white;} in input.css file
                the button color will not be green ( you wrote green after blue in html and should override it)
                the problem here is when you build your project , in the created css file ( build/css/style.css) 
                .btn-blue {@apply bg-blue-500 text-white;}  will be written after bg-green 
                because you wrote .btn-blue {@apply bg-blue-500 text-white;} after @tailwind utilities in input.css
                to solve this problem use @layer components{ .btn-blue {@apply bg-blue-500 text-white;} } 
                now you are sure this code is before @tailwind utilities and will be written in ( build/css/style.css)
                before bg-green
            * note : if you didn't understand visit ( https://bloggie.io/@kinopyo/organize-your-css-in-the-tailwind-style-with-layer-directive )
        
        [b] CSS defined inside layers ,they'll be removed in the generated CSS (build/css/style.css) if not used.

        [c] Wrapping any custom CSS with @layer also makes it possible to use modifiers with those rules, like hover: and focus: 
            or responsive modifiers like md: and lg: ( like widescreen:section-min-height we used section-min-height with media query widescreen)
            * note : to understand how to customize media query visit ( https://tailwindcss.com/docs/screens )






